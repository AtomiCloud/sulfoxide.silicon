# -- AtomiCloud Service Tree. See [ServiceTree](https://atomicloud.larksuite.com/wiki/OkfJwTXGFiMJkrk6W3RuwRrZs64?theme=DARK&contentTheme=DARK#MHw5d76uDo2tBLx86cduFQMRsBb)
serviceTree:
  platform: &platform sulfoxide
  service: &service silicon
  layer: &layer "1"

# -- Kubernetes labels and annotations, following Service Tree
tags: &tags
  argocd.argoproj.io/compare-options: IgnoreExtraneous
  atomi.cloud/platform: *platform
  atomi.cloud/service: *service
  atomi.cloud/layer: *layer

# -- Landscape the operator is deployed to
landscape: entei

# -- Cluster the operators are deployed to
cluster: opal

# -- Loki endpoint for logs
loki: https://logs-prod-011.grafana.net/loki/api/v1/push

# -- Tempo endpoint for traces
tempo: https://tempo-prod-07-prod-ap-southeast-0.grafana.net/tempo

# -- Mimir endpoint for metrics
mimir: https://prometheus-prod-18-prod-ap-southeast-0.grafana.net/api/prom/push

# -- Name of the common config map to propagate to all collectors
configMapName: &configMapName otel-common-config-map

# -- Configuration for Target Allocator
ta:
  # -- Enable creation of target allocator roles
  createRole: true
  # -- Service account for target allocation
  serviceAccount:
    # -- Enable creation of the service account
    create: true
    # -- Name of the service account
    name: &taSA otel-collector-ta-sa

# -- Configuration for K8S Event Collector
k8sevents:
  # -- Enable creation of k8s events role
  createRole: true
  # -- Service account for k8s events
  serviceAccount:
    # -- Enable creation of the service account
    create: true
    # -- Name of the service account
    name: &k8seventsSA otel-collector-k8sevents-sa

# -- Configuration for K8S Cluster Collector
k8scluster:
  # -- Enable creation of k8s cluster role
  createRole: true
  # -- Service account for k8s cluster
  serviceAccount:
    # -- Enable creation of the service account
    create: true
    # -- Name of the service account
    name: &k8sclusterSA otel-collector-k8scluster-sa

# -- Configuration for Kubelet Collector
kubelet:
  # -- Enable creation of kubelet role
  createRole: true
  # -- Service account for kubelet
  serviceAccount:
    # -- Enable creation of the service account
    create: true
    # -- Name of the service account
    name: &kubeletSA otel-collector-kubelet-sa


#-- Configuration of OTLP Collector
otlp:
  # -- Service account for OTLP
  serviceAccount:
    # -- Enable creation of the service account
    create: true
    # -- Name of the service account
    name: &otlpSA otel-collector-otlp-sa

containerLogs:
  # -- Service account for Container Logs
  serviceAccount:
    # -- Enable creation of the service account
    create: true
    # -- Name of the service account
    name: &containerLogsSA otel-container-logs-sa

# -- Configuration for k8sattr extension
k8sattr:
  # -- Enable creation k8sattr role
  createRole: true
  # -- Service accounts to bind the k8sattr roles to
  bind:
    - *kubeletSA
    - *otlpSA
    - *containerLogsSA
    - *k8sclusterSA
    - *taSA


# -- Create SecretStore via secret of secrets pattern
sulfoxide-bromine:
  # -- Store name to create
  storeName: doppler
  # -- Secret of Secrets reference
  rootSecret:
    # -- DOPPLER Token Reference
    ref: "SULFOXIDE_SILICON"

# -- Auth configuration for the collectors
auth:
  # -- Name of the secret to use for the collector
  secretName: &secretName grafana-cloud-secrets
  # -- Mimir auth configuration
  mimir:
    # -- Username for Mimir
    user:
      # -- Local Key reference
      local: MIMIR_USER
      # -- Remote Key reference
      remote: MANUAL_MIMIR_USER
    # -- Password for Mimir
    password:
      # -- Local Key reference
      local: MIMIR_PASSWORD
      # -- Remote Key reference
      remote: MANUAL_MIMIR_PASSWORD
  # -- Loki auth configuration
  loki:
    # -- Username for Loki
    user:
      # -- Local Key reference
      local: LOKI_USER
      # -- Remote Key reference
      remote: MANUAL_LOKI_USER
    # -- Password for Loki
    password:
      # -- Local Key reference
      local: LOKI_PASSWORD
      # -- Remote Key reference
      remote: MANUAL_LOKI_PASSWORD
  # -- Tempo auth configuration
  tempo:
    # -- Username for Tempo
    user:
      # -- Local Key reference
      local: TEMPO_USER
      # -- Remote Key reference
      remote: MANUAL_TEMPO_USER
    # -- Password for Tempo
    password:
      # -- Local Key reference
      local: TEMPO_PASSWORD
      # -- Remote Key reference
      remote: MANUAL_TEMPO_PASSWORD
  # -- Use internal auth for the collectors (hard coded password)
  internal:
    # -- Enable internal auth
    enable: false
    mimir:
      # -- Username for Mimir
      user: ""
      # -- Password for Mimir
      password: ""
    loki:
      # -- Username for Loki
      user: ""
      # -- Password for Loki
      password: ""
    tempo:
      # -- Username for Tempo
      user: ""
      # -- Password for Tempo
      password: ""
  # -- Use external auth for the collectors
  external:
    # -- Enable external auth
    enable: true
    # -- Secret Store to use for secrets
    secretStore:
      # -- Name of the secret store
      name: doppler
      # -- Kind of the secret store, either `ClusterSecretStore` or `SecretStore`
      kind: SecretStore
    # -- External Secret Policy
    policy:
      # -- External Secret Creation Policy
      creation: Owner
      # -- External Secret Deletion Policy
      deletion: Retain

# -- YAML Anchor for PodSecurityContext
podSecurityContext: &podSecurityContext
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  runAsNonRoot: true
# -- YAML Anchor for SecurityContext
securityContext: &securityContext
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  capabilities:
    drop:
      - ALL

# -- Dictionary of collectors to deploy. Key is the name of the collector, while the value is the configuration for the collector.
# This has 2 sub keys: `collector` which is the actual [collector configuration](https://opentelemetry.io/docs/collector/configuration/),
# and `spec`, which is the [operator's configuration](https://github.com/open-telemetry/opentelemetry-operator/blob/main/docs/api.md#opentelemetrycollectorspec)
# for the collector.
apps:
  target-allocator:
    collector: ta.yaml
    spec:
      mode: statefulset
      targetAllocator:
        enabled: true
        serviceAccount: *taSA
        prometheusCR:
          enabled: true
      serviceAccount: *taSA
      replicas: 1
      resources:
        limits:
          cpu: 250m
          memory: 1Gi
        requests:
          cpu: 100m
          memory: 256Mi
      podAnnotations:
        <<: *tags
        atomi.cloud/module: target-allocator-collector
      envFrom:
        - secretRef:
            name: *secretName
        - configMapRef:
            name: *configMapName
      podSecurityContext:
        <<: *podSecurityContext
      securityContext:
        <<: *securityContext

  otlp:
    collector: otlp.yaml
    spec:
      mode: daemonset
      env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      serviceAccount: *otlpSA
      ports:
        - port: 55679
          targetPort: 55679
          name: zpages
      resources:
        limits:
          cpu: 250m
          memory: 1Gi
        requests:
          cpu: 50m
          memory: 128Mi
      podAnnotations:
        <<: *tags
        atomi.cloud/module: otlp-collector
      envFrom:
        - secretRef:
            name: *secretName
        - configMapRef:
            name: *configMapName
      podSecurityContext:
        <<: *podSecurityContext
      securityContext:
        <<: *securityContext

  kubelet-stats:
    collector: kubelet-stats.yaml
    spec:
      mode: daemonset
      serviceAccount: *kubeletSA
      ports:
        - port: 55679
          targetPort: 55679
          name: zpages
      env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
      resources:
        limits:
          cpu: 250m
          memory: 1Gi
        requests:
          cpu: 50m
          memory: 128Mi
      podAnnotations:
        <<: *tags
        atomi.cloud/module: kubelet-stats-collector
      envFrom:
        - secretRef:
            name: *secretName
        - configMapRef:
            name: *configMapName
      podSecurityContext:
        <<: *podSecurityContext
      securityContext:
        <<: *securityContext

  container-logs:
    collector: container-logs.yaml
    spec:
      mode: daemonset
      env:
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
      serviceAccount: *containerLogsSA
      ports:
        - port: 55679
          targetPort: 55679
          name: zpages
      podAnnotations:
        <<: *tags
        atomi.cloud/module: container-logs-collector
      envFrom:
        - secretRef:
            name: *secretName
        - configMapRef:
            name: *configMapName
      resources:
        limits:
          cpu: 1
          memory: 1Gi
        requests:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - name: varlogpods
          mountPath: /var/log/pods
          readOnly: true
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      volumes:
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
      podSecurityContext:
        runAsNonRoot: false
      securityContext: { }

  k8s-cluster:
    collector: k8s-cluster.yaml
    spec:
      mode: deployment
      ports:
        - port: 55679
          targetPort: 55679
          name: zpages
      replicas: 1
      resources:
        limits:
          cpu: 250m
          memory: 1Gi
        requests:
          cpu: 50m
          memory: 256Mi
      serviceAccount: *k8sclusterSA
      podAnnotations:
        <<: *tags
        atomi.cloud/module: cluster-metrics-collector
      envFrom:
        - secretRef:
            name: *secretName
        - configMapRef:
            name: *configMapName
      podSecurityContext:
        <<: *podSecurityContext
      securityContext:
        <<: *securityContext

  k8s-events:
    collector: k8s-events.yaml
    spec:
      mode: deployment
      ports:
        - port: 55679
          targetPort: 55679
          name: zpages
      replicas: 1
      resources:
        limits:
          cpu: 250m
          memory: 1Gi
        requests:
          cpu: 50m
          memory: 256Mi
      serviceAccount: *k8seventsSA
      podAnnotations:
        <<: *tags
        atomi.cloud/module: cluster-events-collector
      envFrom:
        - secretRef:
            name: *secretName
        - configMapRef:
            name: *configMapName
      podSecurityContext:
        <<: *podSecurityContext
      securityContext:
        <<: *securityContext


