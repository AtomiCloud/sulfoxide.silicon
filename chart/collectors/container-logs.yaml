receivers:
  filelog:
    exclude: [ ]
    include:
      - /var/log/pods/*/*/*.log
    include_file_name: false
    include_file_path: true
    operators:
      - id: get-format
        routes:
          - expr: body matches "^\\{"
            output: parser-docker
          - expr: body matches "^[^ Z]+ "
            output: parser-crio
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
        type: router
      - id: parser-crio
        output: extract_metadata_from_filepath
        regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
        timestamp:
          layout: 2006-01-02T15:04:05.999999999Z07:00
          layout_type: gotime
          parse_from: attributes.time
        type: regex_parser
      - id: parser-containerd
        output: extract_metadata_from_filepath
        regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
        timestamp:
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          parse_from: attributes.time
        type: regex_parser
      - id: parser-docker
        output: extract_metadata_from_filepath
        timestamp:
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
          parse_from: attributes.time
        type: json_parser
      - id: extract_metadata_from_filepath
        parse_from: attributes["log.file.path"]
        regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
        type: regex_parser
      - from: attributes.stream
        to: attributes["log.iostream"]
        type: move
      - from: attributes.container_name
        to: resource["k8s.container.name"]
        type: move
      - from: attributes.namespace
        to: resource["k8s.namespace.name"]
        type: move
      - from: attributes.pod_name
        to: resource["k8s.pod.name"]
        type: move
      - from: attributes.restart_count
        to: resource["k8s.container.restart_count"]
        type: move
      - from: attributes.uid
        to: resource["k8s.pod.uid"]
        type: move
      - from: attributes.log
        to: body
        type: move
    start_at: beginning

processors:
  batch:
  k8sattributes:
    auth_type: "serviceAccount"
    passthrough: false
    filter:
      node_from_env_var: KUBE_NODE_NAME
    extract:
      metadata:
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.deployment.name
        - k8s.daemonset.name
        - k8s.service.name
        - k8s.statefulset.name
        - k8s.replicaset.name
        - k8s.job.name
        - k8s.cronjob.name
        - k8s.namespace.name
        - k8s.node.name
        - k8s.pod.start_time
      annotations:
        - tag_name: drop_log
          key: drop_log
          from: pod
        - tag_name: landscape
          key: atomi.cloud/landscape
          from: pod
        - tag_name: platform
          key: atomi.cloud/platform
          from: pod
        - tag_name: module
          key: atomi.cloud/module
          from: pod
        - tag_name: service
          key: atomi.cloud/service
          from: pod
      labels:
        - tag_name: landscape
          key: atomi.cloud/landscape
          from: pod
        - tag_name: service
          key: atomi.cloud/service
          from: pod
        - tag_name: platform
          key: atomi.cloud/platform
          from: pod
        - tag_name: module
          key: atomi.cloud/module
          from: pod
        - tag_name: drop_log
          key: drop_log
          from: pod

    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:
          - from: connection
  attributes:
    actions:
      - key: container.id
        action: delete
      - key: otel.source
        action: insert
        value: container-logs
      - action: insert
        key: loki.attribute.labels
        value: otel.source
  resource:
    attributes:
      - key: container.id
        action: delete
      - key: k8s.cluster
        action: insert
        value: ${env:CLUSTER}
      - action: insert
        key: loki.resource.labels
        value: >-
          module, landscape, platform, service
          k8s.cluster, k8s.container.name, k8s.namespace.name, k8s.node.name, 
          k8s.deployment.name, k8s.statefulset.name, k8s.daemonset.name, 
          k8s.cronjob.name
  filter:
    logs:
      log_record:
        - 'resource.attributes["drop_log"] == "true"'
exporters:
  logging:
  loki:
    endpoint: ${env:LOKI_ENDPOINT}
    auth:
      authenticator: basicauth/loki

extensions:
  health_check:
  pprof:
  zpages:
    endpoint: 0.0.0.0:55679
  basicauth/loki:
    client_auth:
      username: ${env:LOKI_USER}
      password: ${env:LOKI_PASSWORD}

service:
  extensions: [ health_check, pprof, zpages, basicauth/loki ]
  pipelines:
    logs:
      receivers: [ filelog ]
      processors: [ k8sattributes, resource, attributes, batch ]
      exporters: [ loki ]
