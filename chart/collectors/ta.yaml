receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 5s
          static_configs:
            - targets: [ '0.0.0.0:8888' ]
    target_allocator:
      endpoint: "http://${env:TA_ENDPOINT}"
      interval: 5s
      collector_id: "${POD_NAME}"
processors:
  batch:
    send_batch_size: 10000
    timeout: 10s
  attributes:
    actions:
      - key: container.id
        action: delete
      - key: otel.source
        action: insert
        value: target-allocator
  resource:
    attributes:
      - key: k8s.landscape
        action: insert
        value: ${env:K8S_LANDSCAPE}
      - key: k8s.cluster
        action: insert
        value: ${env:K8S_CLUSTER}
      - key: container.id
        action: delete
  k8sattributes:
    auth_type: "serviceAccount"
    passthrough: false
    extract:
      metadata:
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.deployment.name
        - k8s.daemonset.name
        - k8s.statefulset.name
        - k8s.replicaset.name
        - k8s.job.name
        - k8s.cronjob.name
        - k8s.namespace.name
        - k8s.node.name
      annotations:
        - tag_name: drop_log
          key: drop_log
          from: pod
        - tag_name: landscape
          key: atomi.cloud/landscape
          from: pod
        - tag_name: cluster
          key: atomi.cloud/cluster
          from: pod
        - tag_name: platform
          key: atomi.cloud/platform
          from: pod
        - tag_name: module
          key: atomi.cloud/module
          from: pod
        - tag_name: service
          key: atomi.cloud/service
          from: pod
      labels:
        - tag_name: landscape
          key: atomi.cloud/landscape
          from: pod
        - tag_name: cluster
          key: atomi.cloud/cluster
          from: pod
        - tag_name: service
          key: atomi.cloud/service
          from: pod
        - tag_name: platform
          key: atomi.cloud/platform
          from: pod
        - tag_name: module
          key: atomi.cloud/module
          from: pod
        - tag_name: drop_log
          key: drop_log
          from: pod
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.uid
exporters:
  otlphttp/openobserve:
    endpoint: ${env:O2_ENDPOINT}
    headers:
      Authorization: Basic ${env:O2_AUTH}

extensions:
  health_check:
  pprof:
  zpages:
service:
  extensions: [ health_check, pprof, zpages ]
  pipelines:
    metrics:
      receivers: [ prometheus ]
      processors: [ k8sattributes, resource, attributes, batch ]
      exporters: [ otlphttp/openobserve ]
